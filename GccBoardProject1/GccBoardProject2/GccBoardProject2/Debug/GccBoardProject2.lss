
GccBoardProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400bbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  20400434  00400ff0  00020434  2**2
                  ALLOC
  3 .stack        00002000  204004e8  004010a4  00020434  2**0
                  ALLOC
  4 .heap         00000200  204024e8  004030a4  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000cbff  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ac4  00000000  00000000  0002d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002744  00000000  00000000  0002eb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000560  00000000  00000000  000312c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005f0  00000000  00000000  00031822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c40c  00000000  00000000  00031e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006a68  00000000  00000000  0004e21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000896ff  00000000  00000000  00054c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c98  00000000  00000000  000de388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 24 40 20 c1 06 40 00 bd 06 40 00 bd 06 40 00     .$@ ..@...@...@.
  400010:	bd 06 40 00 bd 06 40 00 bd 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	bd 06 40 00 bd 06 40 00 00 00 00 00 bd 06 40 00     ..@...@.......@.
  40003c:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  40004c:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  40005c:	bd 06 40 00 bd 06 40 00 00 00 00 00 61 04 40 00     ..@...@.....a.@.
  40006c:	75 04 40 00 89 04 40 00 bd 06 40 00 bd 06 40 00     u.@...@...@...@.
  40007c:	bd 06 40 00 9d 04 40 00 b1 04 40 00 bd 06 40 00     ..@...@...@...@.
  40008c:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  40009c:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  4000ac:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  4000bc:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  4000cc:	bd 06 40 00 00 00 00 00 bd 06 40 00 00 00 00 00     ..@.......@.....
  4000dc:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  4000ec:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  4000fc:	bd 06 40 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ..@...@...@...@.
  40010c:	bd 06 40 00 bd 06 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 bd 06 40 00 bd 06 40 00 bd 06 40 00     ......@...@...@.
  40012c:	bd 06 40 00 bd 06 40 00 00 00 00 00 bd 06 40 00     ..@...@.......@.
  40013c:	bd 06 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400434 	.word	0x20400434
  40015c:	00000000 	.word	0x00000000
  400160:	00400bbc 	.word	0x00400bbc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400bbc 	.word	0x00400bbc
  4001a0:	20400438 	.word	0x20400438
  4001a4:	00400bbc 	.word	0x00400bbc
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400895 	.word	0x00400895
  4001f8:	004005e5 	.word	0x004005e5
  4001fc:	00400639 	.word	0x00400639
  400200:	00400649 	.word	0x00400649
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400659 	.word	0x00400659
  400210:	00400549 	.word	0x00400549
  400214:	00400581 	.word	0x00400581
  400218:	00400789 	.word	0x00400789

0040021c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  40021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400222:	4b48      	ldr	r3, [pc, #288]	; (400344 <board_init+0x128>)
  400224:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40022a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40022e:	4b46      	ldr	r3, [pc, #280]	; (400348 <board_init+0x12c>)
  400230:	2200      	movs	r2, #0
  400232:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400236:	695a      	ldr	r2, [r3, #20]
  400238:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40023c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40023e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400242:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400246:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40024a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40024e:	f007 0007 	and.w	r0, r7, #7
  400252:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400254:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400258:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40025c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400260:	f3bf 8f4f 	dsb	sy
  400264:	f04f 34ff 	mov.w	r4, #4294967295
  400268:	fa04 fc00 	lsl.w	ip, r4, r0
  40026c:	fa06 f000 	lsl.w	r0, r6, r0
  400270:	fa04 f40e 	lsl.w	r4, r4, lr
  400274:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400278:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40027a:	463a      	mov	r2, r7
  40027c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40027e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400282:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400286:	3a01      	subs	r2, #1
  400288:	4423      	add	r3, r4
  40028a:	f1b2 3fff 	cmp.w	r2, #4294967295
  40028e:	d1f6      	bne.n	40027e <board_init+0x62>
        } while(sets--);
  400290:	3e01      	subs	r6, #1
  400292:	4460      	add	r0, ip
  400294:	f1b6 3fff 	cmp.w	r6, #4294967295
  400298:	d1ef      	bne.n	40027a <board_init+0x5e>
  40029a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40029e:	4b2a      	ldr	r3, [pc, #168]	; (400348 <board_init+0x12c>)
  4002a0:	695a      	ldr	r2, [r3, #20]
  4002a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4002a6:	615a      	str	r2, [r3, #20]
  4002a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ac:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b0:	4a26      	ldr	r2, [pc, #152]	; (40034c <board_init+0x130>)
  4002b2:	4927      	ldr	r1, [pc, #156]	; (400350 <board_init+0x134>)
  4002b4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002b6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4002ba:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4002bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002c0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002c4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002c8:	f022 0201 	bic.w	r2, r2, #1
  4002cc:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4002d0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4002d4:	f022 0201 	bic.w	r2, r2, #1
  4002d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e0:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e4:	200a      	movs	r0, #10
  4002e6:	4c1b      	ldr	r4, [pc, #108]	; (400354 <board_init+0x138>)
  4002e8:	47a0      	blx	r4
  4002ea:	200b      	movs	r0, #11
  4002ec:	47a0      	blx	r4
  4002ee:	200c      	movs	r0, #12
  4002f0:	47a0      	blx	r4
  4002f2:	2010      	movs	r0, #16
  4002f4:	47a0      	blx	r4
  4002f6:	2011      	movs	r0, #17
  4002f8:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002fa:	4b17      	ldr	r3, [pc, #92]	; (400358 <board_init+0x13c>)
  4002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  400300:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400306:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400308:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40030c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400310:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400312:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400316:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40031c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40031e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400324:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400326:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40032a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40032c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40032e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400332:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400334:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400338:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40033c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400342:	bf00      	nop
  400344:	400e1850 	.word	0x400e1850
  400348:	e000ed00 	.word	0xe000ed00
  40034c:	400e0c00 	.word	0x400e0c00
  400350:	5a00080c 	.word	0x5a00080c
  400354:	00400669 	.word	0x00400669
  400358:	400e1200 	.word	0x400e1200

0040035c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  40035c:	f012 0f10 	tst.w	r2, #16
  400360:	d012      	beq.n	400388 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400362:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400366:	f012 0f20 	tst.w	r2, #32
  40036a:	d007      	beq.n	40037c <pio_configure_interrupt+0x20>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40036c:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400370:	f012 0f40 	tst.w	r2, #64	; 0x40
  400374:	d005      	beq.n	400382 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400376:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40037a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40037c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400380:	e7f6      	b.n	400370 <pio_configure_interrupt+0x14>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400382:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400386:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400388:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40038c:	4770      	bx	lr

0040038e <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40038e:	6401      	str	r1, [r0, #64]	; 0x40
  400390:	4770      	bx	lr

00400392 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400392:	6441      	str	r1, [r0, #68]	; 0x44
  400394:	4770      	bx	lr

00400396 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400396:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400398:	4770      	bx	lr

0040039a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40039a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40039c:	4770      	bx	lr
	...

004003a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003a4:	4604      	mov	r4, r0
  4003a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003a8:	4b0e      	ldr	r3, [pc, #56]	; (4003e4 <pio_handler_process+0x44>)
  4003aa:	4798      	blx	r3
  4003ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003ae:	4620      	mov	r0, r4
  4003b0:	4b0d      	ldr	r3, [pc, #52]	; (4003e8 <pio_handler_process+0x48>)
  4003b2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003b4:	4005      	ands	r5, r0
  4003b6:	d013      	beq.n	4003e0 <pio_handler_process+0x40>
  4003b8:	4c0c      	ldr	r4, [pc, #48]	; (4003ec <pio_handler_process+0x4c>)
  4003ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4003be:	e003      	b.n	4003c8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4003c0:	42b4      	cmp	r4, r6
  4003c2:	d00d      	beq.n	4003e0 <pio_handler_process+0x40>
  4003c4:	3410      	adds	r4, #16
		while (status != 0) {
  4003c6:	b15d      	cbz	r5, 4003e0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4003c8:	6820      	ldr	r0, [r4, #0]
  4003ca:	4540      	cmp	r0, r8
  4003cc:	d1f8      	bne.n	4003c0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4003ce:	6861      	ldr	r1, [r4, #4]
  4003d0:	4229      	tst	r1, r5
  4003d2:	d0f5      	beq.n	4003c0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4003d4:	68e3      	ldr	r3, [r4, #12]
  4003d6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4003d8:	6863      	ldr	r3, [r4, #4]
  4003da:	ea25 0503 	bic.w	r5, r5, r3
  4003de:	e7ef      	b.n	4003c0 <pio_handler_process+0x20>
  4003e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003e4:	00400397 	.word	0x00400397
  4003e8:	0040039b 	.word	0x0040039b
  4003ec:	20400450 	.word	0x20400450

004003f0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4003f2:	4c18      	ldr	r4, [pc, #96]	; (400454 <pio_handler_set+0x64>)
  4003f4:	6826      	ldr	r6, [r4, #0]
  4003f6:	2e06      	cmp	r6, #6
  4003f8:	d82a      	bhi.n	400450 <pio_handler_set+0x60>
  4003fa:	f04f 0c00 	mov.w	ip, #0
  4003fe:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400400:	4f15      	ldr	r7, [pc, #84]	; (400458 <pio_handler_set+0x68>)
  400402:	e004      	b.n	40040e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400404:	3401      	adds	r4, #1
  400406:	b2e4      	uxtb	r4, r4
  400408:	46a4      	mov	ip, r4
  40040a:	42a6      	cmp	r6, r4
  40040c:	d309      	bcc.n	400422 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40040e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400410:	0125      	lsls	r5, r4, #4
  400412:	597d      	ldr	r5, [r7, r5]
  400414:	428d      	cmp	r5, r1
  400416:	d1f5      	bne.n	400404 <pio_handler_set+0x14>
  400418:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40041c:	686d      	ldr	r5, [r5, #4]
  40041e:	4295      	cmp	r5, r2
  400420:	d1f0      	bne.n	400404 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400422:	4d0d      	ldr	r5, [pc, #52]	; (400458 <pio_handler_set+0x68>)
  400424:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400428:	eb05 040e 	add.w	r4, r5, lr
  40042c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400430:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400432:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400434:	9906      	ldr	r1, [sp, #24]
  400436:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400438:	3601      	adds	r6, #1
  40043a:	4566      	cmp	r6, ip
  40043c:	d005      	beq.n	40044a <pio_handler_set+0x5a>
  40043e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400440:	461a      	mov	r2, r3
  400442:	4b06      	ldr	r3, [pc, #24]	; (40045c <pio_handler_set+0x6c>)
  400444:	4798      	blx	r3

	return 0;
  400446:	2000      	movs	r0, #0
  400448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40044a:	4902      	ldr	r1, [pc, #8]	; (400454 <pio_handler_set+0x64>)
  40044c:	600e      	str	r6, [r1, #0]
  40044e:	e7f6      	b.n	40043e <pio_handler_set+0x4e>
		return 1;
  400450:	2001      	movs	r0, #1
}
  400452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400454:	204004c0 	.word	0x204004c0
  400458:	20400450 	.word	0x20400450
  40045c:	0040035d 	.word	0x0040035d

00400460 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400460:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400462:	210a      	movs	r1, #10
  400464:	4801      	ldr	r0, [pc, #4]	; (40046c <PIOA_Handler+0xc>)
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <PIOA_Handler+0x10>)
  400468:	4798      	blx	r3
  40046a:	bd08      	pop	{r3, pc}
  40046c:	400e0e00 	.word	0x400e0e00
  400470:	004003a1 	.word	0x004003a1

00400474 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400474:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400476:	210b      	movs	r1, #11
  400478:	4801      	ldr	r0, [pc, #4]	; (400480 <PIOB_Handler+0xc>)
  40047a:	4b02      	ldr	r3, [pc, #8]	; (400484 <PIOB_Handler+0x10>)
  40047c:	4798      	blx	r3
  40047e:	bd08      	pop	{r3, pc}
  400480:	400e1000 	.word	0x400e1000
  400484:	004003a1 	.word	0x004003a1

00400488 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400488:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40048a:	210c      	movs	r1, #12
  40048c:	4801      	ldr	r0, [pc, #4]	; (400494 <PIOC_Handler+0xc>)
  40048e:	4b02      	ldr	r3, [pc, #8]	; (400498 <PIOC_Handler+0x10>)
  400490:	4798      	blx	r3
  400492:	bd08      	pop	{r3, pc}
  400494:	400e1200 	.word	0x400e1200
  400498:	004003a1 	.word	0x004003a1

0040049c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40049c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40049e:	2110      	movs	r1, #16
  4004a0:	4801      	ldr	r0, [pc, #4]	; (4004a8 <PIOD_Handler+0xc>)
  4004a2:	4b02      	ldr	r3, [pc, #8]	; (4004ac <PIOD_Handler+0x10>)
  4004a4:	4798      	blx	r3
  4004a6:	bd08      	pop	{r3, pc}
  4004a8:	400e1400 	.word	0x400e1400
  4004ac:	004003a1 	.word	0x004003a1

004004b0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4004b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4004b2:	2111      	movs	r1, #17
  4004b4:	4801      	ldr	r0, [pc, #4]	; (4004bc <PIOE_Handler+0xc>)
  4004b6:	4b02      	ldr	r3, [pc, #8]	; (4004c0 <PIOE_Handler+0x10>)
  4004b8:	4798      	blx	r3
  4004ba:	bd08      	pop	{r3, pc}
  4004bc:	400e1600 	.word	0x400e1600
  4004c0:	004003a1 	.word	0x004003a1

004004c4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004c6:	4606      	mov	r6, r0
  4004c8:	460d      	mov	r5, r1
  4004ca:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4004cc:	4b17      	ldr	r3, [pc, #92]	; (40052c <pio_handler_set_priority+0x68>)
  4004ce:	4798      	blx	r3
  4004d0:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4004d2:	f04f 31ff 	mov.w	r1, #4294967295
  4004d6:	4630      	mov	r0, r6
  4004d8:	4b15      	ldr	r3, [pc, #84]	; (400530 <pio_handler_set_priority+0x6c>)
  4004da:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4004dc:	4630      	mov	r0, r6
  4004de:	4b15      	ldr	r3, [pc, #84]	; (400534 <pio_handler_set_priority+0x70>)
  4004e0:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4004e2:	fa5f fe85 	uxtb.w	lr, r5
  4004e6:	f00e 031f 	and.w	r3, lr, #31
  4004ea:	2201      	movs	r2, #1
  4004ec:	fa02 f303 	lsl.w	r3, r2, r3
  4004f0:	0968      	lsrs	r0, r5, #5
  4004f2:	4911      	ldr	r1, [pc, #68]	; (400538 <pio_handler_set_priority+0x74>)
  4004f4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  4004f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4004fc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  400500:	2d00      	cmp	r5, #0
  400502:	db0a      	blt.n	40051a <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400504:	0164      	lsls	r4, r4, #5
  400506:	b2e4      	uxtb	r4, r4
  400508:	4a0c      	ldr	r2, [pc, #48]	; (40053c <pio_handler_set_priority+0x78>)
  40050a:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40050c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400510:	4639      	mov	r1, r7
  400512:	4630      	mov	r0, r6
  400514:	4b0a      	ldr	r3, [pc, #40]	; (400540 <pio_handler_set_priority+0x7c>)
  400516:	4798      	blx	r3
  400518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40051a:	f00e 0e0f 	and.w	lr, lr, #15
  40051e:	0164      	lsls	r4, r4, #5
  400520:	b2e4      	uxtb	r4, r4
  400522:	4a08      	ldr	r2, [pc, #32]	; (400544 <pio_handler_set_priority+0x80>)
  400524:	f802 400e 	strb.w	r4, [r2, lr]
  400528:	e7f0      	b.n	40050c <pio_handler_set_priority+0x48>
  40052a:	bf00      	nop
  40052c:	0040039b 	.word	0x0040039b
  400530:	00400393 	.word	0x00400393
  400534:	00400397 	.word	0x00400397
  400538:	e000e100 	.word	0xe000e100
  40053c:	e000e400 	.word	0xe000e400
  400540:	0040038f 	.word	0x0040038f
  400544:	e000ed14 	.word	0xe000ed14

00400548 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400548:	2803      	cmp	r0, #3
  40054a:	d011      	beq.n	400570 <pmc_mck_set_division+0x28>
  40054c:	2804      	cmp	r0, #4
  40054e:	d012      	beq.n	400576 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400550:	2802      	cmp	r0, #2
  400552:	bf0c      	ite	eq
  400554:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400558:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40055a:	4a08      	ldr	r2, [pc, #32]	; (40057c <pmc_mck_set_division+0x34>)
  40055c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40055e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400562:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400564:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400566:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400568:	f013 0f08 	tst.w	r3, #8
  40056c:	d0fb      	beq.n	400566 <pmc_mck_set_division+0x1e>
}
  40056e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400570:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400574:	e7f1      	b.n	40055a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400576:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40057a:	e7ee      	b.n	40055a <pmc_mck_set_division+0x12>
  40057c:	400e0600 	.word	0x400e0600

00400580 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400580:	4a17      	ldr	r2, [pc, #92]	; (4005e0 <pmc_switch_mck_to_pllack+0x60>)
  400582:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400588:	4318      	orrs	r0, r3
  40058a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40058c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40058e:	f013 0f08 	tst.w	r3, #8
  400592:	d10a      	bne.n	4005aa <pmc_switch_mck_to_pllack+0x2a>
  400594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400598:	4911      	ldr	r1, [pc, #68]	; (4005e0 <pmc_switch_mck_to_pllack+0x60>)
  40059a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40059c:	f012 0f08 	tst.w	r2, #8
  4005a0:	d103      	bne.n	4005aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005a2:	3b01      	subs	r3, #1
  4005a4:	d1f9      	bne.n	40059a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4005a6:	2001      	movs	r0, #1
  4005a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005aa:	4a0d      	ldr	r2, [pc, #52]	; (4005e0 <pmc_switch_mck_to_pllack+0x60>)
  4005ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005ae:	f023 0303 	bic.w	r3, r3, #3
  4005b2:	f043 0302 	orr.w	r3, r3, #2
  4005b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ba:	f013 0f08 	tst.w	r3, #8
  4005be:	d10a      	bne.n	4005d6 <pmc_switch_mck_to_pllack+0x56>
  4005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005c4:	4906      	ldr	r1, [pc, #24]	; (4005e0 <pmc_switch_mck_to_pllack+0x60>)
  4005c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005c8:	f012 0f08 	tst.w	r2, #8
  4005cc:	d105      	bne.n	4005da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ce:	3b01      	subs	r3, #1
  4005d0:	d1f9      	bne.n	4005c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4005d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4005d4:	4770      	bx	lr
	return 0;
  4005d6:	2000      	movs	r0, #0
  4005d8:	4770      	bx	lr
  4005da:	2000      	movs	r0, #0
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	400e0600 	.word	0x400e0600

004005e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005e4:	b9a0      	cbnz	r0, 400610 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005e6:	480e      	ldr	r0, [pc, #56]	; (400620 <pmc_switch_mainck_to_xtal+0x3c>)
  4005e8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005ea:	0209      	lsls	r1, r1, #8
  4005ec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005ee:	4a0d      	ldr	r2, [pc, #52]	; (400624 <pmc_switch_mainck_to_xtal+0x40>)
  4005f0:	401a      	ands	r2, r3
  4005f2:	4b0d      	ldr	r3, [pc, #52]	; (400628 <pmc_switch_mainck_to_xtal+0x44>)
  4005f4:	4313      	orrs	r3, r2
  4005f6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005f8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005fa:	4602      	mov	r2, r0
  4005fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005fe:	f013 0f01 	tst.w	r3, #1
  400602:	d0fb      	beq.n	4005fc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400604:	4a06      	ldr	r2, [pc, #24]	; (400620 <pmc_switch_mainck_to_xtal+0x3c>)
  400606:	6a11      	ldr	r1, [r2, #32]
  400608:	4b08      	ldr	r3, [pc, #32]	; (40062c <pmc_switch_mainck_to_xtal+0x48>)
  40060a:	430b      	orrs	r3, r1
  40060c:	6213      	str	r3, [r2, #32]
  40060e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400610:	4903      	ldr	r1, [pc, #12]	; (400620 <pmc_switch_mainck_to_xtal+0x3c>)
  400612:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400614:	4a06      	ldr	r2, [pc, #24]	; (400630 <pmc_switch_mainck_to_xtal+0x4c>)
  400616:	401a      	ands	r2, r3
  400618:	4b06      	ldr	r3, [pc, #24]	; (400634 <pmc_switch_mainck_to_xtal+0x50>)
  40061a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40061c:	620b      	str	r3, [r1, #32]
  40061e:	4770      	bx	lr
  400620:	400e0600 	.word	0x400e0600
  400624:	ffc8fffc 	.word	0xffc8fffc
  400628:	00370001 	.word	0x00370001
  40062c:	01370000 	.word	0x01370000
  400630:	fec8fffc 	.word	0xfec8fffc
  400634:	01370002 	.word	0x01370002

00400638 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400638:	4b02      	ldr	r3, [pc, #8]	; (400644 <pmc_osc_is_ready_mainck+0xc>)
  40063a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40063c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	400e0600 	.word	0x400e0600

00400648 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400648:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40064c:	4b01      	ldr	r3, [pc, #4]	; (400654 <pmc_disable_pllack+0xc>)
  40064e:	629a      	str	r2, [r3, #40]	; 0x28
  400650:	4770      	bx	lr
  400652:	bf00      	nop
  400654:	400e0600 	.word	0x400e0600

00400658 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400658:	4b02      	ldr	r3, [pc, #8]	; (400664 <pmc_is_locked_pllack+0xc>)
  40065a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40065c:	f000 0002 	and.w	r0, r0, #2
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	400e0600 	.word	0x400e0600

00400668 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400668:	283f      	cmp	r0, #63	; 0x3f
  40066a:	d81e      	bhi.n	4006aa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40066c:	281f      	cmp	r0, #31
  40066e:	d80c      	bhi.n	40068a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400670:	4b11      	ldr	r3, [pc, #68]	; (4006b8 <pmc_enable_periph_clk+0x50>)
  400672:	699a      	ldr	r2, [r3, #24]
  400674:	2301      	movs	r3, #1
  400676:	4083      	lsls	r3, r0
  400678:	4393      	bics	r3, r2
  40067a:	d018      	beq.n	4006ae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40067c:	2301      	movs	r3, #1
  40067e:	fa03 f000 	lsl.w	r0, r3, r0
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <pmc_enable_periph_clk+0x50>)
  400684:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400686:	2000      	movs	r0, #0
  400688:	4770      	bx	lr
		ul_id -= 32;
  40068a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40068c:	4b0a      	ldr	r3, [pc, #40]	; (4006b8 <pmc_enable_periph_clk+0x50>)
  40068e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400692:	2301      	movs	r3, #1
  400694:	4083      	lsls	r3, r0
  400696:	4393      	bics	r3, r2
  400698:	d00b      	beq.n	4006b2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40069a:	2301      	movs	r3, #1
  40069c:	fa03 f000 	lsl.w	r0, r3, r0
  4006a0:	4b05      	ldr	r3, [pc, #20]	; (4006b8 <pmc_enable_periph_clk+0x50>)
  4006a2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4006a6:	2000      	movs	r0, #0
  4006a8:	4770      	bx	lr
		return 1;
  4006aa:	2001      	movs	r0, #1
  4006ac:	4770      	bx	lr
	return 0;
  4006ae:	2000      	movs	r0, #0
  4006b0:	4770      	bx	lr
  4006b2:	2000      	movs	r0, #0
}
  4006b4:	4770      	bx	lr
  4006b6:	bf00      	nop
  4006b8:	400e0600 	.word	0x400e0600

004006bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4006bc:	e7fe      	b.n	4006bc <Dummy_Handler>
	...

004006c0 <Reset_Handler>:
{
  4006c0:	b500      	push	{lr}
  4006c2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4006c4:	4b25      	ldr	r3, [pc, #148]	; (40075c <Reset_Handler+0x9c>)
  4006c6:	4a26      	ldr	r2, [pc, #152]	; (400760 <Reset_Handler+0xa0>)
  4006c8:	429a      	cmp	r2, r3
  4006ca:	d010      	beq.n	4006ee <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4006cc:	4b25      	ldr	r3, [pc, #148]	; (400764 <Reset_Handler+0xa4>)
  4006ce:	4a23      	ldr	r2, [pc, #140]	; (40075c <Reset_Handler+0x9c>)
  4006d0:	429a      	cmp	r2, r3
  4006d2:	d20c      	bcs.n	4006ee <Reset_Handler+0x2e>
  4006d4:	3b01      	subs	r3, #1
  4006d6:	1a9b      	subs	r3, r3, r2
  4006d8:	f023 0303 	bic.w	r3, r3, #3
  4006dc:	3304      	adds	r3, #4
  4006de:	4413      	add	r3, r2
  4006e0:	491f      	ldr	r1, [pc, #124]	; (400760 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4006e2:	f851 0b04 	ldr.w	r0, [r1], #4
  4006e6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4006ea:	429a      	cmp	r2, r3
  4006ec:	d1f9      	bne.n	4006e2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4006ee:	4b1e      	ldr	r3, [pc, #120]	; (400768 <Reset_Handler+0xa8>)
  4006f0:	4a1e      	ldr	r2, [pc, #120]	; (40076c <Reset_Handler+0xac>)
  4006f2:	429a      	cmp	r2, r3
  4006f4:	d20a      	bcs.n	40070c <Reset_Handler+0x4c>
  4006f6:	3b01      	subs	r3, #1
  4006f8:	1a9b      	subs	r3, r3, r2
  4006fa:	f023 0303 	bic.w	r3, r3, #3
  4006fe:	3304      	adds	r3, #4
  400700:	4413      	add	r3, r2
                *pDest++ = 0;
  400702:	2100      	movs	r1, #0
  400704:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400708:	4293      	cmp	r3, r2
  40070a:	d1fb      	bne.n	400704 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40070c:	4a18      	ldr	r2, [pc, #96]	; (400770 <Reset_Handler+0xb0>)
  40070e:	4b19      	ldr	r3, [pc, #100]	; (400774 <Reset_Handler+0xb4>)
  400710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400714:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400716:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40071a:	fab3 f383 	clz	r3, r3
  40071e:	095b      	lsrs	r3, r3, #5
  400720:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400722:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400724:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400728:	2200      	movs	r2, #0
  40072a:	4b13      	ldr	r3, [pc, #76]	; (400778 <Reset_Handler+0xb8>)
  40072c:	701a      	strb	r2, [r3, #0]
	return flags;
  40072e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400730:	4a12      	ldr	r2, [pc, #72]	; (40077c <Reset_Handler+0xbc>)
  400732:	6813      	ldr	r3, [r2, #0]
  400734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400738:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40073a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40073e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400742:	b129      	cbz	r1, 400750 <Reset_Handler+0x90>
		cpu_irq_enable();
  400744:	2201      	movs	r2, #1
  400746:	4b0c      	ldr	r3, [pc, #48]	; (400778 <Reset_Handler+0xb8>)
  400748:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40074a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40074e:	b662      	cpsie	i
        __libc_init_array();
  400750:	4b0b      	ldr	r3, [pc, #44]	; (400780 <Reset_Handler+0xc0>)
  400752:	4798      	blx	r3
        main();
  400754:	4b0b      	ldr	r3, [pc, #44]	; (400784 <Reset_Handler+0xc4>)
  400756:	4798      	blx	r3
  400758:	e7fe      	b.n	400758 <Reset_Handler+0x98>
  40075a:	bf00      	nop
  40075c:	20400000 	.word	0x20400000
  400760:	00400bbc 	.word	0x00400bbc
  400764:	20400434 	.word	0x20400434
  400768:	204004e8 	.word	0x204004e8
  40076c:	20400434 	.word	0x20400434
  400770:	e000ed00 	.word	0xe000ed00
  400774:	00400000 	.word	0x00400000
  400778:	20400000 	.word	0x20400000
  40077c:	e000ed88 	.word	0xe000ed88
  400780:	00400a25 	.word	0x00400a25
  400784:	00400995 	.word	0x00400995

00400788 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400788:	4b3b      	ldr	r3, [pc, #236]	; (400878 <SystemCoreClockUpdate+0xf0>)
  40078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40078c:	f003 0303 	and.w	r3, r3, #3
  400790:	2b01      	cmp	r3, #1
  400792:	d01d      	beq.n	4007d0 <SystemCoreClockUpdate+0x48>
  400794:	b183      	cbz	r3, 4007b8 <SystemCoreClockUpdate+0x30>
  400796:	2b02      	cmp	r3, #2
  400798:	d036      	beq.n	400808 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40079a:	4b37      	ldr	r3, [pc, #220]	; (400878 <SystemCoreClockUpdate+0xf0>)
  40079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40079e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007a2:	2b70      	cmp	r3, #112	; 0x70
  4007a4:	d05f      	beq.n	400866 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4007a6:	4b34      	ldr	r3, [pc, #208]	; (400878 <SystemCoreClockUpdate+0xf0>)
  4007a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4007aa:	4934      	ldr	r1, [pc, #208]	; (40087c <SystemCoreClockUpdate+0xf4>)
  4007ac:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4007b0:	680b      	ldr	r3, [r1, #0]
  4007b2:	40d3      	lsrs	r3, r2
  4007b4:	600b      	str	r3, [r1, #0]
  4007b6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4007b8:	4b31      	ldr	r3, [pc, #196]	; (400880 <SystemCoreClockUpdate+0xf8>)
  4007ba:	695b      	ldr	r3, [r3, #20]
  4007bc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4007c0:	bf14      	ite	ne
  4007c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4007c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4007ca:	4b2c      	ldr	r3, [pc, #176]	; (40087c <SystemCoreClockUpdate+0xf4>)
  4007cc:	601a      	str	r2, [r3, #0]
  4007ce:	e7e4      	b.n	40079a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4007d0:	4b29      	ldr	r3, [pc, #164]	; (400878 <SystemCoreClockUpdate+0xf0>)
  4007d2:	6a1b      	ldr	r3, [r3, #32]
  4007d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4007d8:	d003      	beq.n	4007e2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4007da:	4a2a      	ldr	r2, [pc, #168]	; (400884 <SystemCoreClockUpdate+0xfc>)
  4007dc:	4b27      	ldr	r3, [pc, #156]	; (40087c <SystemCoreClockUpdate+0xf4>)
  4007de:	601a      	str	r2, [r3, #0]
  4007e0:	e7db      	b.n	40079a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4007e2:	4a29      	ldr	r2, [pc, #164]	; (400888 <SystemCoreClockUpdate+0x100>)
  4007e4:	4b25      	ldr	r3, [pc, #148]	; (40087c <SystemCoreClockUpdate+0xf4>)
  4007e6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4007e8:	4b23      	ldr	r3, [pc, #140]	; (400878 <SystemCoreClockUpdate+0xf0>)
  4007ea:	6a1b      	ldr	r3, [r3, #32]
  4007ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007f0:	2b10      	cmp	r3, #16
  4007f2:	d005      	beq.n	400800 <SystemCoreClockUpdate+0x78>
  4007f4:	2b20      	cmp	r3, #32
  4007f6:	d1d0      	bne.n	40079a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4007f8:	4a22      	ldr	r2, [pc, #136]	; (400884 <SystemCoreClockUpdate+0xfc>)
  4007fa:	4b20      	ldr	r3, [pc, #128]	; (40087c <SystemCoreClockUpdate+0xf4>)
  4007fc:	601a      	str	r2, [r3, #0]
          break;
  4007fe:	e7cc      	b.n	40079a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400800:	4a22      	ldr	r2, [pc, #136]	; (40088c <SystemCoreClockUpdate+0x104>)
  400802:	4b1e      	ldr	r3, [pc, #120]	; (40087c <SystemCoreClockUpdate+0xf4>)
  400804:	601a      	str	r2, [r3, #0]
          break;
  400806:	e7c8      	b.n	40079a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400808:	4b1b      	ldr	r3, [pc, #108]	; (400878 <SystemCoreClockUpdate+0xf0>)
  40080a:	6a1b      	ldr	r3, [r3, #32]
  40080c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400810:	d016      	beq.n	400840 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400812:	4a1c      	ldr	r2, [pc, #112]	; (400884 <SystemCoreClockUpdate+0xfc>)
  400814:	4b19      	ldr	r3, [pc, #100]	; (40087c <SystemCoreClockUpdate+0xf4>)
  400816:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400818:	4b17      	ldr	r3, [pc, #92]	; (400878 <SystemCoreClockUpdate+0xf0>)
  40081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40081c:	f003 0303 	and.w	r3, r3, #3
  400820:	2b02      	cmp	r3, #2
  400822:	d1ba      	bne.n	40079a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400824:	4a14      	ldr	r2, [pc, #80]	; (400878 <SystemCoreClockUpdate+0xf0>)
  400826:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400828:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40082a:	4814      	ldr	r0, [pc, #80]	; (40087c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40082c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400830:	6803      	ldr	r3, [r0, #0]
  400832:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400836:	b2d2      	uxtb	r2, r2
  400838:	fbb3 f3f2 	udiv	r3, r3, r2
  40083c:	6003      	str	r3, [r0, #0]
  40083e:	e7ac      	b.n	40079a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400840:	4a11      	ldr	r2, [pc, #68]	; (400888 <SystemCoreClockUpdate+0x100>)
  400842:	4b0e      	ldr	r3, [pc, #56]	; (40087c <SystemCoreClockUpdate+0xf4>)
  400844:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400846:	4b0c      	ldr	r3, [pc, #48]	; (400878 <SystemCoreClockUpdate+0xf0>)
  400848:	6a1b      	ldr	r3, [r3, #32]
  40084a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40084e:	2b10      	cmp	r3, #16
  400850:	d005      	beq.n	40085e <SystemCoreClockUpdate+0xd6>
  400852:	2b20      	cmp	r3, #32
  400854:	d1e0      	bne.n	400818 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400856:	4a0b      	ldr	r2, [pc, #44]	; (400884 <SystemCoreClockUpdate+0xfc>)
  400858:	4b08      	ldr	r3, [pc, #32]	; (40087c <SystemCoreClockUpdate+0xf4>)
  40085a:	601a      	str	r2, [r3, #0]
          break;
  40085c:	e7dc      	b.n	400818 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40085e:	4a0b      	ldr	r2, [pc, #44]	; (40088c <SystemCoreClockUpdate+0x104>)
  400860:	4b06      	ldr	r3, [pc, #24]	; (40087c <SystemCoreClockUpdate+0xf4>)
  400862:	601a      	str	r2, [r3, #0]
          break;
  400864:	e7d8      	b.n	400818 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400866:	4a05      	ldr	r2, [pc, #20]	; (40087c <SystemCoreClockUpdate+0xf4>)
  400868:	6813      	ldr	r3, [r2, #0]
  40086a:	4909      	ldr	r1, [pc, #36]	; (400890 <SystemCoreClockUpdate+0x108>)
  40086c:	fba1 1303 	umull	r1, r3, r1, r3
  400870:	085b      	lsrs	r3, r3, #1
  400872:	6013      	str	r3, [r2, #0]
  400874:	4770      	bx	lr
  400876:	bf00      	nop
  400878:	400e0600 	.word	0x400e0600
  40087c:	20400004 	.word	0x20400004
  400880:	400e1810 	.word	0x400e1810
  400884:	00b71b00 	.word	0x00b71b00
  400888:	003d0900 	.word	0x003d0900
  40088c:	007a1200 	.word	0x007a1200
  400890:	aaaaaaab 	.word	0xaaaaaaab

00400894 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400894:	4b16      	ldr	r3, [pc, #88]	; (4008f0 <system_init_flash+0x5c>)
  400896:	4298      	cmp	r0, r3
  400898:	d913      	bls.n	4008c2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40089a:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <system_init_flash+0x60>)
  40089c:	4298      	cmp	r0, r3
  40089e:	d915      	bls.n	4008cc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4008a0:	4b15      	ldr	r3, [pc, #84]	; (4008f8 <system_init_flash+0x64>)
  4008a2:	4298      	cmp	r0, r3
  4008a4:	d916      	bls.n	4008d4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4008a6:	4b15      	ldr	r3, [pc, #84]	; (4008fc <system_init_flash+0x68>)
  4008a8:	4298      	cmp	r0, r3
  4008aa:	d917      	bls.n	4008dc <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4008ac:	4b14      	ldr	r3, [pc, #80]	; (400900 <system_init_flash+0x6c>)
  4008ae:	4298      	cmp	r0, r3
  4008b0:	d918      	bls.n	4008e4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4008b2:	4b14      	ldr	r3, [pc, #80]	; (400904 <system_init_flash+0x70>)
  4008b4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4008b6:	bf94      	ite	ls
  4008b8:	4a13      	ldrls	r2, [pc, #76]	; (400908 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4008ba:	4a14      	ldrhi	r2, [pc, #80]	; (40090c <system_init_flash+0x78>)
  4008bc:	4b14      	ldr	r3, [pc, #80]	; (400910 <system_init_flash+0x7c>)
  4008be:	601a      	str	r2, [r3, #0]
  4008c0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4008c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4008c6:	4b12      	ldr	r3, [pc, #72]	; (400910 <system_init_flash+0x7c>)
  4008c8:	601a      	str	r2, [r3, #0]
  4008ca:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4008cc:	4a11      	ldr	r2, [pc, #68]	; (400914 <system_init_flash+0x80>)
  4008ce:	4b10      	ldr	r3, [pc, #64]	; (400910 <system_init_flash+0x7c>)
  4008d0:	601a      	str	r2, [r3, #0]
  4008d2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4008d4:	4a10      	ldr	r2, [pc, #64]	; (400918 <system_init_flash+0x84>)
  4008d6:	4b0e      	ldr	r3, [pc, #56]	; (400910 <system_init_flash+0x7c>)
  4008d8:	601a      	str	r2, [r3, #0]
  4008da:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4008dc:	4a0f      	ldr	r2, [pc, #60]	; (40091c <system_init_flash+0x88>)
  4008de:	4b0c      	ldr	r3, [pc, #48]	; (400910 <system_init_flash+0x7c>)
  4008e0:	601a      	str	r2, [r3, #0]
  4008e2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4008e4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4008e8:	4b09      	ldr	r3, [pc, #36]	; (400910 <system_init_flash+0x7c>)
  4008ea:	601a      	str	r2, [r3, #0]
  4008ec:	4770      	bx	lr
  4008ee:	bf00      	nop
  4008f0:	015ef3bf 	.word	0x015ef3bf
  4008f4:	02bde77f 	.word	0x02bde77f
  4008f8:	041cdb3f 	.word	0x041cdb3f
  4008fc:	057bceff 	.word	0x057bceff
  400900:	06dac2bf 	.word	0x06dac2bf
  400904:	0839b67f 	.word	0x0839b67f
  400908:	04000500 	.word	0x04000500
  40090c:	04000600 	.word	0x04000600
  400910:	400e0c00 	.word	0x400e0c00
  400914:	04000100 	.word	0x04000100
  400918:	04000200 	.word	0x04000200
  40091c:	04000300 	.word	0x04000300

00400920 <PIRHandler>:
	//
	//NVIC_EnableIRQ(PIOB_IRQn);		// Enable all interrupts
}

static void PIRHandler (const uint32_t id, const uint32_t index)
{
  400920:	b538      	push	{r3, r4, r5, lr}
	uint32_t bitmask = pio_get_interrupt_mask(PIOB);
  400922:	4c14      	ldr	r4, [pc, #80]	; (400974 <PIRHandler+0x54>)
  400924:	4620      	mov	r0, r4
  400926:	4b14      	ldr	r3, [pc, #80]	; (400978 <PIRHandler+0x58>)
  400928:	4798      	blx	r3
  40092a:	4605      	mov	r5, r0
	pio_disable_interrupt(PIOB, 0xFFFFFFFF);
  40092c:	f04f 31ff 	mov.w	r1, #4294967295
  400930:	4620      	mov	r0, r4
  400932:	4b12      	ldr	r3, [pc, #72]	; (40097c <PIRHandler+0x5c>)
  400934:	4798      	blx	r3
	pio_get_interrupt_status(PIOB);
  400936:	4620      	mov	r0, r4
  400938:	4b11      	ldr	r3, [pc, #68]	; (400980 <PIRHandler+0x60>)
  40093a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40093c:	4b11      	ldr	r3, [pc, #68]	; (400984 <PIRHandler+0x64>)
  40093e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400946:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40094a:	2100      	movs	r1, #0
  40094c:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400950:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type) ID_PIOB);
	
	NVIC_ClearPendingIRQ((IRQn_Type) ID_PIOB);
	NVIC_SetPriority((IRQn_Type) ID_PIOB, 0x00);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOB);
	pio_enable_interrupt(PIOB, bitmask);
  400952:	4629      	mov	r1, r5
  400954:	4620      	mov	r0, r4
  400956:	4b0c      	ldr	r3, [pc, #48]	; (400988 <PIRHandler+0x68>)
  400958:	4798      	blx	r3
  40095a:	4b0c      	ldr	r3, [pc, #48]	; (40098c <PIRHandler+0x6c>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40095c:	490c      	ldr	r1, [pc, #48]	; (400990 <PIRHandler+0x70>)
  40095e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400962:	634a      	str	r2, [r1, #52]	; 0x34
	
	for (int i = 0; i < 100000000; i++)
  400964:	3b01      	subs	r3, #1
  400966:	d1fc      	bne.n	400962 <PIRHandler+0x42>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400968:	f44f 7280 	mov.w	r2, #256	; 0x100
  40096c:	4b08      	ldr	r3, [pc, #32]	; (400990 <PIRHandler+0x70>)
  40096e:	631a      	str	r2, [r3, #48]	; 0x30
  400970:	bd38      	pop	{r3, r4, r5, pc}
  400972:	bf00      	nop
  400974:	400e1000 	.word	0x400e1000
  400978:	0040039b 	.word	0x0040039b
  40097c:	00400393 	.word	0x00400393
  400980:	00400397 	.word	0x00400397
  400984:	e000e100 	.word	0xe000e100
  400988:	0040038f 	.word	0x0040038f
  40098c:	05f5e100 	.word	0x05f5e100
  400990:	400e1200 	.word	0x400e1200

00400994 <main>:
{
  400994:	b500      	push	{lr}
  400996:	b083      	sub	sp, #12
	sysclk_init();
  400998:	4b1a      	ldr	r3, [pc, #104]	; (400a04 <main+0x70>)
  40099a:	4798      	blx	r3
	board_init();
  40099c:	4b1a      	ldr	r3, [pc, #104]	; (400a08 <main+0x74>)
  40099e:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009a0:	4b1a      	ldr	r3, [pc, #104]	; (400a0c <main+0x78>)
  4009a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4009a6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ac:	4c18      	ldr	r4, [pc, #96]	; (400a10 <main+0x7c>)
  4009ae:	2501      	movs	r5, #1
  4009b0:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009b2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009b6:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009b8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009bc:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4009be:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCDR = mask;
  4009c0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4009c6:	f023 0301 	bic.w	r3, r3, #1
  4009ca:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4009ce:	f023 0301 	bic.w	r3, r3, #1
  4009d2:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_ESR = mask;
  4009d4:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009d8:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4009dc:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
	return;
}

static void enablePIRIRQ(void)
{
	pmc_enable_periph_clk(ID_PIOB);
  4009e0:	200b      	movs	r0, #11
  4009e2:	4b0c      	ldr	r3, [pc, #48]	; (400a14 <main+0x80>)
  4009e4:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB0, PIO_IT_RISE_EDGE, PIRHandler);	
  4009e6:	4b0c      	ldr	r3, [pc, #48]	; (400a18 <main+0x84>)
  4009e8:	9300      	str	r3, [sp, #0]
  4009ea:	2370      	movs	r3, #112	; 0x70
  4009ec:	462a      	mov	r2, r5
  4009ee:	210b      	movs	r1, #11
  4009f0:	4620      	mov	r0, r4
  4009f2:	4d0a      	ldr	r5, [pc, #40]	; (400a1c <main+0x88>)
  4009f4:	47a8      	blx	r5
	pio_handler_set_priority(PIOB, (IRQn_Type) ID_PIOB, 0x00);
  4009f6:	2200      	movs	r2, #0
  4009f8:	210b      	movs	r1, #11
  4009fa:	4620      	mov	r0, r4
  4009fc:	4b08      	ldr	r3, [pc, #32]	; (400a20 <main+0x8c>)
  4009fe:	4798      	blx	r3
  400a00:	e7fe      	b.n	400a00 <main+0x6c>
  400a02:	bf00      	nop
  400a04:	004001ad 	.word	0x004001ad
  400a08:	0040021d 	.word	0x0040021d
  400a0c:	400e1200 	.word	0x400e1200
  400a10:	400e1000 	.word	0x400e1000
  400a14:	00400669 	.word	0x00400669
  400a18:	00400921 	.word	0x00400921
  400a1c:	004003f1 	.word	0x004003f1
  400a20:	004004c5 	.word	0x004004c5

00400a24 <__libc_init_array>:
  400a24:	b570      	push	{r4, r5, r6, lr}
  400a26:	4e0f      	ldr	r6, [pc, #60]	; (400a64 <__libc_init_array+0x40>)
  400a28:	4d0f      	ldr	r5, [pc, #60]	; (400a68 <__libc_init_array+0x44>)
  400a2a:	1b76      	subs	r6, r6, r5
  400a2c:	10b6      	asrs	r6, r6, #2
  400a2e:	bf18      	it	ne
  400a30:	2400      	movne	r4, #0
  400a32:	d005      	beq.n	400a40 <__libc_init_array+0x1c>
  400a34:	3401      	adds	r4, #1
  400a36:	f855 3b04 	ldr.w	r3, [r5], #4
  400a3a:	4798      	blx	r3
  400a3c:	42a6      	cmp	r6, r4
  400a3e:	d1f9      	bne.n	400a34 <__libc_init_array+0x10>
  400a40:	4e0a      	ldr	r6, [pc, #40]	; (400a6c <__libc_init_array+0x48>)
  400a42:	4d0b      	ldr	r5, [pc, #44]	; (400a70 <__libc_init_array+0x4c>)
  400a44:	1b76      	subs	r6, r6, r5
  400a46:	f000 f8a7 	bl	400b98 <_init>
  400a4a:	10b6      	asrs	r6, r6, #2
  400a4c:	bf18      	it	ne
  400a4e:	2400      	movne	r4, #0
  400a50:	d006      	beq.n	400a60 <__libc_init_array+0x3c>
  400a52:	3401      	adds	r4, #1
  400a54:	f855 3b04 	ldr.w	r3, [r5], #4
  400a58:	4798      	blx	r3
  400a5a:	42a6      	cmp	r6, r4
  400a5c:	d1f9      	bne.n	400a52 <__libc_init_array+0x2e>
  400a5e:	bd70      	pop	{r4, r5, r6, pc}
  400a60:	bd70      	pop	{r4, r5, r6, pc}
  400a62:	bf00      	nop
  400a64:	00400ba4 	.word	0x00400ba4
  400a68:	00400ba4 	.word	0x00400ba4
  400a6c:	00400bac 	.word	0x00400bac
  400a70:	00400ba4 	.word	0x00400ba4

00400a74 <register_fini>:
  400a74:	4b02      	ldr	r3, [pc, #8]	; (400a80 <register_fini+0xc>)
  400a76:	b113      	cbz	r3, 400a7e <register_fini+0xa>
  400a78:	4802      	ldr	r0, [pc, #8]	; (400a84 <register_fini+0x10>)
  400a7a:	f000 b805 	b.w	400a88 <atexit>
  400a7e:	4770      	bx	lr
  400a80:	00000000 	.word	0x00000000
  400a84:	00400a95 	.word	0x00400a95

00400a88 <atexit>:
  400a88:	2300      	movs	r3, #0
  400a8a:	4601      	mov	r1, r0
  400a8c:	461a      	mov	r2, r3
  400a8e:	4618      	mov	r0, r3
  400a90:	f000 b81e 	b.w	400ad0 <__register_exitproc>

00400a94 <__libc_fini_array>:
  400a94:	b538      	push	{r3, r4, r5, lr}
  400a96:	4c0a      	ldr	r4, [pc, #40]	; (400ac0 <__libc_fini_array+0x2c>)
  400a98:	4d0a      	ldr	r5, [pc, #40]	; (400ac4 <__libc_fini_array+0x30>)
  400a9a:	1b64      	subs	r4, r4, r5
  400a9c:	10a4      	asrs	r4, r4, #2
  400a9e:	d00a      	beq.n	400ab6 <__libc_fini_array+0x22>
  400aa0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400aa4:	3b01      	subs	r3, #1
  400aa6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400aaa:	3c01      	subs	r4, #1
  400aac:	f855 3904 	ldr.w	r3, [r5], #-4
  400ab0:	4798      	blx	r3
  400ab2:	2c00      	cmp	r4, #0
  400ab4:	d1f9      	bne.n	400aaa <__libc_fini_array+0x16>
  400ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400aba:	f000 b877 	b.w	400bac <_fini>
  400abe:	bf00      	nop
  400ac0:	00400bbc 	.word	0x00400bbc
  400ac4:	00400bb8 	.word	0x00400bb8

00400ac8 <__retarget_lock_acquire_recursive>:
  400ac8:	4770      	bx	lr
  400aca:	bf00      	nop

00400acc <__retarget_lock_release_recursive>:
  400acc:	4770      	bx	lr
  400ace:	bf00      	nop

00400ad0 <__register_exitproc>:
  400ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ad4:	4d2c      	ldr	r5, [pc, #176]	; (400b88 <__register_exitproc+0xb8>)
  400ad6:	4606      	mov	r6, r0
  400ad8:	6828      	ldr	r0, [r5, #0]
  400ada:	4698      	mov	r8, r3
  400adc:	460f      	mov	r7, r1
  400ade:	4691      	mov	r9, r2
  400ae0:	f7ff fff2 	bl	400ac8 <__retarget_lock_acquire_recursive>
  400ae4:	4b29      	ldr	r3, [pc, #164]	; (400b8c <__register_exitproc+0xbc>)
  400ae6:	681c      	ldr	r4, [r3, #0]
  400ae8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400aec:	2b00      	cmp	r3, #0
  400aee:	d03e      	beq.n	400b6e <__register_exitproc+0x9e>
  400af0:	685a      	ldr	r2, [r3, #4]
  400af2:	2a1f      	cmp	r2, #31
  400af4:	dc1c      	bgt.n	400b30 <__register_exitproc+0x60>
  400af6:	f102 0e01 	add.w	lr, r2, #1
  400afa:	b176      	cbz	r6, 400b1a <__register_exitproc+0x4a>
  400afc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400b00:	2401      	movs	r4, #1
  400b02:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400b06:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400b0a:	4094      	lsls	r4, r2
  400b0c:	4320      	orrs	r0, r4
  400b0e:	2e02      	cmp	r6, #2
  400b10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400b14:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400b18:	d023      	beq.n	400b62 <__register_exitproc+0x92>
  400b1a:	3202      	adds	r2, #2
  400b1c:	f8c3 e004 	str.w	lr, [r3, #4]
  400b20:	6828      	ldr	r0, [r5, #0]
  400b22:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400b26:	f7ff ffd1 	bl	400acc <__retarget_lock_release_recursive>
  400b2a:	2000      	movs	r0, #0
  400b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b30:	4b17      	ldr	r3, [pc, #92]	; (400b90 <__register_exitproc+0xc0>)
  400b32:	b30b      	cbz	r3, 400b78 <__register_exitproc+0xa8>
  400b34:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400b38:	f3af 8000 	nop.w
  400b3c:	4603      	mov	r3, r0
  400b3e:	b1d8      	cbz	r0, 400b78 <__register_exitproc+0xa8>
  400b40:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400b44:	6002      	str	r2, [r0, #0]
  400b46:	2100      	movs	r1, #0
  400b48:	6041      	str	r1, [r0, #4]
  400b4a:	460a      	mov	r2, r1
  400b4c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400b50:	f04f 0e01 	mov.w	lr, #1
  400b54:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400b58:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400b5c:	2e00      	cmp	r6, #0
  400b5e:	d0dc      	beq.n	400b1a <__register_exitproc+0x4a>
  400b60:	e7cc      	b.n	400afc <__register_exitproc+0x2c>
  400b62:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400b66:	430c      	orrs	r4, r1
  400b68:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400b6c:	e7d5      	b.n	400b1a <__register_exitproc+0x4a>
  400b6e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400b72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400b76:	e7bb      	b.n	400af0 <__register_exitproc+0x20>
  400b78:	6828      	ldr	r0, [r5, #0]
  400b7a:	f7ff ffa7 	bl	400acc <__retarget_lock_release_recursive>
  400b7e:	f04f 30ff 	mov.w	r0, #4294967295
  400b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b86:	bf00      	nop
  400b88:	20400430 	.word	0x20400430
  400b8c:	00400b94 	.word	0x00400b94
  400b90:	00000000 	.word	0x00000000

00400b94 <_global_impure_ptr>:
  400b94:	20400008                                ..@ 

00400b98 <_init>:
  400b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b9a:	bf00      	nop
  400b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b9e:	bc08      	pop	{r3}
  400ba0:	469e      	mov	lr, r3
  400ba2:	4770      	bx	lr

00400ba4 <__init_array_start>:
  400ba4:	00400a75 	.word	0x00400a75

00400ba8 <__frame_dummy_init_array_entry>:
  400ba8:	00400165                                e.@.

00400bac <_fini>:
  400bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bae:	bf00      	nop
  400bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400bb2:	bc08      	pop	{r3}
  400bb4:	469e      	mov	lr, r3
  400bb6:	4770      	bx	lr

00400bb8 <__fini_array_start>:
  400bb8:	00400141 	.word	0x00400141
